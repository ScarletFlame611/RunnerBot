from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from bot.utils.db import get_last_two_trainings

router = Router()


def calculate_average_speed(distance, duration):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç—ã
    hours, minutes, seconds = map(int, duration.split(":"))
    total_minutes = hours * 60 + minutes + seconds / 60
    if total_minutes == 0:  # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Ä–∞–≤–Ω–æ –Ω—É–ª—é, —Å–∫–æ—Ä–æ—Å—Ç—å –±—É–¥–µ—Ç –Ω—É–ª–µ–≤–æ–π
        return 0
    return distance / total_minutes


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /compare_trainings
@router.message(Command("compare_two"))
async def compare_trainings_command(message: Message):
    user_id = message.from_user.id
    last_two_trainings = get_last_two_trainings(user_id)

    if len(last_two_trainings) < 2:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö
    training_1 = last_two_trainings[0]
    training_2 = last_two_trainings[1]
    distance_1, duration_1, date_1 = training_1
    distance_2, duration_2, date_2 = training_2

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Å–∫–æ—Ä–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    speed_1 = calculate_average_speed(distance_1, duration_1)
    speed_2 = calculate_average_speed(distance_2, duration_2)

    comparison_text = (
        f"üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n\n"
        f"1Ô∏è‚É£ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç {date_1}:\n"
        f"   - –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance_1} –∫–º\n"
        f"   - –í—Ä–µ–º—è: {duration_1}\n"
        f"   - –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {speed_1:.2f} –∫–º/–º–∏–Ω\n\n"
        f"2Ô∏è‚É£ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –æ—Ç {date_2}:\n"
        f"   - –î–∏—Å—Ç–∞–Ω—Ü–∏—è: {distance_2} –∫–º\n"
        f"   - –í—Ä–µ–º—è: {duration_2}\n"
        f"   - –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {speed_2:.2f} –∫–º/–º–∏–Ω\n\n"
    )

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏, –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏
    distance_comparison = "–ë–æ–ª—å—à–µ" if distance_1 > distance_2 else (
        "–ú–µ–Ω—å—à–µ" if distance_1 < distance_2 else "–†–∞–≤–Ω—ã")
    duration_comparison = "–ë–æ–ª—å—à–µ" if duration_1 > duration_2 else (
        "–ú–µ–Ω—å—à–µ" if duration_1 < duration_2 else "–†–∞–≤–Ω—ã")
    speed_comparison = "–ë–æ–ª—å—à–µ" if speed_1 > speed_2 else (
        "–ú–µ–Ω—å—à–µ" if speed_1 < speed_2 else "–†–∞–≤–Ω—ã")

    comparison_text += (
        f"üìè –°—Ä–∞–≤–Ω–µ–Ω–∏–µ:\n"
        f"   - –î–∏—Å—Ç–∞–Ω—Ü–∏—è: –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1 {distance_comparison} –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 2\n"
        f"   - –í—Ä–µ–º—è: –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1 {duration_comparison} –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 2\n"
        f"   - –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 1 {speed_comparison} –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 2\n"
    )

    await message.answer(comparison_text)
