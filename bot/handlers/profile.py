from aiogram import Router, F
from aiogram.types import Message
from bot.utils.db import get_user_profile, update_profile_in_db
from aiogram.filters import Command
from aiogram.types import FSInputFile
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
profile_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è", callback_data="edit_profile")]
])
router = Router()


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ProfileChange(StatesGroup):
    waiting_for_name = State()  # –û–∂–∏–¥–∞–µ–º –∏–º—è
    waiting_for_age = State()  # –û–∂–∏–¥–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç
    waiting_for_height = State()  # –û–∂–∏–¥–∞–µ–º —Ä–æ—Å—Ç
    waiting_for_weight = State()  # –û–∂–∏–¥–∞–µ–º –≤–µ—Å


# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
edit_profile_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", callback_data="edit_name")],
    [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")],
    [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ—Å—Ç", callback_data="edit_height")],
    [InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å", callback_data="edit_weight")]
])

router = Router()


@router.message(Command("profile"))
async def profile_command(message: Message):
    user_id = message.from_user.id
    profile = get_user_profile(user_id)
    if not profile:
        await message.answer(
            "–í—ã –µ—â—ë –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    total_duration_formatted = format_duration(profile["total_duration"])
    text = (
        f"üë§ *–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n"
        f"üìã *–ò–º—è:* {profile['full_name']}\n"
        f"üéÇ *–í–æ–∑—Ä–∞—Å—Ç:* {profile['age']} –ª–µ—Ç\n"
        f"üìè *–†–æ—Å—Ç:* {profile['height']} —Å–º\n"
        f"‚öñÔ∏è *–í–µ—Å:* {profile['weight']} –∫–≥\n"
        f"üèÖ *–£—Ä–æ–≤–µ–Ω—å:* {profile['level']}\n"
        f"üéØ *–¶–µ–ª—å:* {profile['goal']}\n\n"
        f"üèÉ *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–µ–∂–µ–∫*\n"
        f"üìä *–í—Å–µ–≥–æ –ø—Ä–æ–±–µ–∂–µ–∫:* {profile['total_runs']}\n"
        f"üìè *–û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è:* {profile['total_distance']:.2f} –∫–º\n"
        f"‚è± *–û–±—â–µ–µ –≤—Ä–µ–º—è:* {total_duration_formatted}"
    )
    profile_image = FSInputFile("../data/images/profile_image.jpg")
    await message.answer_photo(
        photo=profile_image,
        caption=text,
        reply_markup=profile_keyboard,
        parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
@router.callback_query(F.data == "edit_profile")
async def edit_profile_callback(callback_query: CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    await callback_query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
        reply_markup=edit_profile_keyboard
    )
    await callback_query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data.in_({"edit_name", "edit_age", "edit_height", "edit_weight"}))
async def change_profile_parameter(callback_query: CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    action = callback_query.data.split("_")[
        1]  # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä (name, age, height, weight, goal)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–º–µ–Ω—è–µ—Ç—Å—è
    await state.update_data(parameter=action)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    await callback_query.message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ {action}:")
    # –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    if action == "name":
        await state.set_state(ProfileChange.waiting_for_name)
    elif action == "age":
        await state.set_state(ProfileChange.waiting_for_age)
    elif action == "height":
        await state.set_state(ProfileChange.waiting_for_height)
    elif action == "weight":
        await state.set_state(ProfileChange.waiting_for_weight)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
@router.message(ProfileChange.waiting_for_name)
async def process_name(message: Message, state: FSMContext):
    new_name = message.text.strip()
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –±—É–∫–≤ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Å–ª–æ–≤–∞
    if not new_name.replace(" ", "").isalpha() or len(new_name.split()) < 2:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û. –û–Ω–æ –¥–æ–ª–∂–Ω–æ —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º –¥–≤–∞ —Å–ª–æ–≤–∞."
        )
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_profile_in_db(user_id, "full_name", new_name)
    await message.answer(f"–í–∞—à–µ –∏–º—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {new_name}.")
    await state.clear()


@router.message(ProfileChange.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    new_age = message.text
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
    if not new_age.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ).")
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_profile_in_db(user_id, "age", new_age)
    await message.answer(f"–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_age}.")
    await state.clear()


@router.message(ProfileChange.waiting_for_height)
async def process_height(message: Message, state: FSMContext):
    new_height = message.text
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
    if not new_height.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç –≤ —Å–º).")
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_profile_in_db(user_id, "height", new_height)
    await message.answer(f"–í–∞—à —Ä–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_height}.")
    await state.clear()


@router.message(ProfileChange.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    new_weight = message.text
    user_id = message.from_user.id
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º
    if not new_weight.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö).")
        return
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    update_profile_in_db(user_id, "weight", new_weight)
    await message.answer(f"–í–∞—à –≤–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_weight}.")
    await state.clear()


def format_duration(total_duration: str) -> str:
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥—ã
    hours, minutes, seconds = map(int, total_duration.split(":"))
    total_seconds = hours * 3600 + minutes * 60 + seconds
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–µ–∫—É–Ω–¥—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã
    hours = total_seconds // 3600
    minutes = (total_seconds % 3600) // 60
    seconds = total_seconds % 60
    return f"{hours:02}:{minutes:02}:{seconds:02}"
