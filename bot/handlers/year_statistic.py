from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from datetime import datetime, timedelta

from bot.utils.db import get_trainings_last_year

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
router = Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ –º–µ—Å—è—Ü–∞–º
def group_trainings_by_month(trainings):
    stats = {}

    for distance, duration, date in trainings:

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∏–∑ –¥–∞—Ç—ã
        try:
            month = datetime.strptime(date, "%Y-%m-%d %H:%M:%S").strftime("%Y-%m")
        except Exception as e:
            print(f"Error parsing date '{date}': {e}")
            continue

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥—ã
        try:
            hours, minutes, seconds = map(int, duration.split(":"))
            total_seconds = hours * 3600 + minutes * 60 + seconds
        except Exception as e:
            print(f"Error converting duration '{duration}': {e}")
            continue

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –º–µ—Å—è—Ü–∞, –µ—Å–ª–∏ –µ–µ –µ—â–µ –Ω–µ—Ç
        if month not in stats:
            stats[month] = {
                "count": 0,
                "total_distance": 0.0,
                "total_duration": 0  # –•—Ä–∞–Ω–∏–º –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            }

        stats[month]["count"] += 1
        stats[month]["total_distance"] += distance
        stats[month]["total_duration"] += total_seconds

    return stats


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /year_statistics
@router.message(Command("year_stats"))
async def year_statistics_command(message: Message):
    user_id = message.from_user.id
    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
    trainings = get_trainings_last_year(user_id)

    if not trainings:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥.")
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_stats = group_trainings_by_month(trainings)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç—á–µ—Ç–∞
    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥:\n\n"
    total_runs = 0
    total_distance = 0.0
    total_duration = 0

    for month, stats in sorted(monthly_stats.items()):
        text += f"üìÖ {month}:\n"
        text += f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['count']}\n"
        text += f"   - –°—É–º–º–∞—Ä–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats['total_distance']:.2f} –∫–º\n"

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∏–∑ —Å–µ–∫—É–Ω–¥ –≤ —Ñ–æ—Ä–º–∞—Ç "—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã" –¥–ª—è –≤—ã–≤–æ–¥–∞
        total_seconds = stats["total_duration"]
        hours, remainder = divmod(total_seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        formatted_duration = f"{hours}—á {minutes}–º {seconds}—Å"

        text += f"   - –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {formatted_duration}\n\n"

        total_runs += stats["count"]
        total_distance += stats["total_distance"]
        total_duration += stats["total_duration"]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≥–æ–¥
    text += f"üìÖ –û–±—â–µ–µ –∑–∞ –≥–æ–¥:\n"
    text += f"   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total_runs}\n"
    text += f"   - –°—É–º–º–∞—Ä–Ω–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {total_distance:.2f} –∫–º\n"

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—â–µ–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç "—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã:—Å–µ–∫—É–Ω–¥—ã" –¥–ª—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
    total_hours, remainder = divmod(total_duration, 3600)
    total_minutes, total_seconds = divmod(remainder, 60)
    total_duration_str = f"{total_hours}—á {total_minutes}–º {total_seconds}—Å"

    text += f"   - –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {total_duration_str}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    await message.answer(text)
